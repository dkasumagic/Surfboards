
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.54 (git sha1 db72ec3bd, g++ 15.1.1 -march=x86-64 -mtune=generic -O2 -fno-plt -fexceptions -fstack-clash-protection -fcf-protection -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer -ffile-prefix-map=/build/yosys/src=/usr/src/debug/yosys -fPIC -O3)

-- Executing script file `src/backend/to_edif.ys' --

1. Executing Verilog-2005 frontend: build/rtl_conv.v
Parsing Verilog input from `build/rtl_conv.v' to AST representation.
Generating RTLIL representation for module `\surfboard'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: surfboard           
Automatically selected surfboard as design top module.

2.2. Analyzing design hierarchy..
Top module:  \surfboard

2.3. Analyzing design hierarchy..
Top module:  \surfboard
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\surfboard.$proc$build/rtl_conv.v:0$56'.
Found and cleaned up 1 empty switch in `\surfboard.$proc$build/rtl_conv.v:0$51'.
Found and cleaned up 1 empty switch in `\surfboard.$proc$build/rtl_conv.v:0$46'.
Found and cleaned up 1 empty switch in `\surfboard.$proc$build/rtl_conv.v:0$41'.
Found and cleaned up 1 empty switch in `\surfboard.$proc$build/rtl_conv.v:0$36'.
Found and cleaned up 1 empty switch in `\surfboard.$proc$build/rtl_conv.v:0$31'.
Found and cleaned up 1 empty switch in `\surfboard.$proc$build/rtl_conv.v:0$26'.
Found and cleaned up 1 empty switch in `\surfboard.$proc$build/rtl_conv.v:0$21'.
Cleaned up 8 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 24 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\surfboard.$proc$build/rtl_conv.v:0$56'.
Creating decoders for process `\surfboard.$proc$build/rtl_conv.v:0$51'.
Creating decoders for process `\surfboard.$proc$build/rtl_conv.v:0$46'.
Creating decoders for process `\surfboard.$proc$build/rtl_conv.v:0$41'.
Creating decoders for process `\surfboard.$proc$build/rtl_conv.v:0$36'.
Creating decoders for process `\surfboard.$proc$build/rtl_conv.v:0$31'.
Creating decoders for process `\surfboard.$proc$build/rtl_conv.v:0$26'.
Creating decoders for process `\surfboard.$proc$build/rtl_conv.v:0$21'.

3.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\surfboard.\mul$func$build/rtl_conv.v:30$8.$result' from process `\surfboard.$proc$build/rtl_conv.v:0$56'.
No latch inferred for signal `\surfboard.\mul$func$build/rtl_conv.v:30$16.$result' from process `\surfboard.$proc$build/rtl_conv.v:0$56'.
No latch inferred for signal `\surfboard.\mul$func$build/rtl_conv.v:30$7.$result' from process `\surfboard.$proc$build/rtl_conv.v:0$51'.
No latch inferred for signal `\surfboard.\mul$func$build/rtl_conv.v:30$15.$result' from process `\surfboard.$proc$build/rtl_conv.v:0$51'.
No latch inferred for signal `\surfboard.\mul$func$build/rtl_conv.v:29$6.$result' from process `\surfboard.$proc$build/rtl_conv.v:0$46'.
No latch inferred for signal `\surfboard.\mul$func$build/rtl_conv.v:29$14.$result' from process `\surfboard.$proc$build/rtl_conv.v:0$46'.
No latch inferred for signal `\surfboard.\mul$func$build/rtl_conv.v:29$5.$result' from process `\surfboard.$proc$build/rtl_conv.v:0$41'.
No latch inferred for signal `\surfboard.\mul$func$build/rtl_conv.v:29$13.$result' from process `\surfboard.$proc$build/rtl_conv.v:0$41'.
No latch inferred for signal `\surfboard.\mul$func$build/rtl_conv.v:28$4.$result' from process `\surfboard.$proc$build/rtl_conv.v:0$36'.
No latch inferred for signal `\surfboard.\mul$func$build/rtl_conv.v:28$12.$result' from process `\surfboard.$proc$build/rtl_conv.v:0$36'.
No latch inferred for signal `\surfboard.\mul$func$build/rtl_conv.v:28$3.$result' from process `\surfboard.$proc$build/rtl_conv.v:0$31'.
No latch inferred for signal `\surfboard.\mul$func$build/rtl_conv.v:28$11.$result' from process `\surfboard.$proc$build/rtl_conv.v:0$31'.
No latch inferred for signal `\surfboard.\mul$func$build/rtl_conv.v:27$2.$result' from process `\surfboard.$proc$build/rtl_conv.v:0$26'.
No latch inferred for signal `\surfboard.\mul$func$build/rtl_conv.v:27$10.$result' from process `\surfboard.$proc$build/rtl_conv.v:0$26'.
No latch inferred for signal `\surfboard.\mul$func$build/rtl_conv.v:27$1.$result' from process `\surfboard.$proc$build/rtl_conv.v:0$21'.
No latch inferred for signal `\surfboard.\mul$func$build/rtl_conv.v:27$9.$result' from process `\surfboard.$proc$build/rtl_conv.v:0$21'.

3.9. Executing PROC_DFF pass (convert process syncs to FFs).

3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `surfboard.$proc$build/rtl_conv.v:0$56'.
Removing empty process `surfboard.$proc$build/rtl_conv.v:0$51'.
Removing empty process `surfboard.$proc$build/rtl_conv.v:0$46'.
Removing empty process `surfboard.$proc$build/rtl_conv.v:0$41'.
Removing empty process `surfboard.$proc$build/rtl_conv.v:0$36'.
Removing empty process `surfboard.$proc$build/rtl_conv.v:0$31'.
Removing empty process `surfboard.$proc$build/rtl_conv.v:0$26'.
Removing empty process `surfboard.$proc$build/rtl_conv.v:0$21'.
Cleaned up 0 empty switches.

3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module surfboard.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module surfboard.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\surfboard'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \surfboard..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \surfboard.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\surfboard'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \surfboard..
Removed 0 unused cells and 44 unused wires.
<suppressed ~1 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module surfboard.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \surfboard..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \surfboard.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\surfboard'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \surfboard..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module surfboard.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Executing FSM pass (extract and optimize FSM).

5.1. Executing FSM_DETECT pass (finding FSMs in design).

5.2. Executing FSM_EXTRACT pass (extracting FSM from design).

5.3. Executing FSM_OPT pass (simple optimizations of FSMs).

5.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \surfboard..

5.5. Executing FSM_OPT pass (simple optimizations of FSMs).

5.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

5.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

5.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

6. Executing OPT pass (performing simple optimizations).

6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module surfboard.

6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\surfboard'.
Removed a total of 0 cells.

6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \surfboard..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \surfboard.
Performed a total of 0 changes.

6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\surfboard'.
Removed a total of 0 cells.

6.6. Executing OPT_DFF pass (perform DFF optimizations).

6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \surfboard..

6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module surfboard.

6.9. Finished OPT passes. (There is nothing left to do.)

7. Executing MEMORY pass.

7.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

7.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

7.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

7.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

7.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

7.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \surfboard..

7.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

7.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

7.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \surfboard..

7.10. Executing MEMORY_COLLECT pass (generating $mem cells).

7.11. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module surfboard.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\surfboard'.
Removed a total of 0 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \surfboard..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \surfboard.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\surfboard'.
Removed a total of 0 cells.

8.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \surfboard..

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module surfboard.

8.9. Finished OPT passes. (There is nothing left to do.)

9. Executing TECHMAP pass (map to technology primitives).

9.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

9.2. Continuing TECHMAP pass.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=16:B_SIGNED=0:B_WIDTH=16:Y_WIDTH=16:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=16:B_SIGNED=0:B_WIDTH=16:Y_WIDTH=16:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=16:B_SIGNED=0:B_WIDTH=16:Y_WIDTH=16:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=16:B_SIGNED=0:B_WIDTH=16:Y_WIDTH=16:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=16:B_SIGNED=0:B_WIDTH=16:Y_WIDTH=16:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=16:B_SIGNED=0:B_WIDTH=16:Y_WIDTH=16:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$6df0329addda9228fcc2546de2aaf14ad26c98e1\_90_alu for cells of type $alu.
Using extmapper maccmap for cells of type $macc_v2.
  add \A [63:48] * \B [63:48] (16x16 bits, unsigned)
  add \A [47:32] * \B [31:16] (16x16 bits, unsigned)
  add \A [63:48] * \B [47:32] (16x16 bits, unsigned)
  add \A [47:32] * \B [15:0] (16x16 bits, unsigned)
  add \A [31:16] * \B [63:48] (16x16 bits, unsigned)
  add \A [15:0] * \B [31:16] (16x16 bits, unsigned)
  add \A [31:16] * \B [47:32] (16x16 bits, unsigned)
  add \A [15:0] * \B [15:0] (16x16 bits, unsigned)
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010000 for cells of type $fa.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~1961 debug messages>

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module surfboard.
<suppressed ~6157 debug messages>

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\surfboard'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \surfboard..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \surfboard.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\surfboard'.
Removed a total of 0 cells.

10.6. Executing OPT_DFF pass (perform DFF optimizations).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \surfboard..
Removed 649 unused cells and 1767 unused wires.
<suppressed ~650 debug messages>

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module surfboard.

10.9. Rerunning OPT passes. (Maybe there is more to do..)

10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \surfboard..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \surfboard.
Performed a total of 0 changes.

10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\surfboard'.
Removed a total of 0 cells.

10.13. Executing OPT_DFF pass (perform DFF optimizations).

10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \surfboard..

10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module surfboard.

10.16. Finished OPT passes. (There is nothing left to do.)

11. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFF (noninv, pins=3, area=8.00) is a direct match for cell type $_DFF_P_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \DFF _DFF_P_ (.CK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    unmapped dff cell: $_DFF_PN0_
    unmapped dff cell: $_DFF_PN1_
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFE_NN_
    unmapped dff cell: $_DFFE_NP_
    unmapped dff cell: $_DFFE_PN_
    unmapped dff cell: $_DFFE_PP_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

11.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\surfboard':

12. Executing ABC pass (technology mapping using ABC).

12.1. Extracting gate netlist of module `\surfboard' to `<abc-temp-dir>/input.blif'..
Extracted 5954 gates and 6082 wires to a netlist network with 128 inputs and 64 outputs.

12.1.1. Executing ABC.
Running ABC command: "abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/michael/Surfboards/build/libs/basic_cells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Library "basic_cells" from "/home/michael/Surfboards/build/libs/basic_cells.lib" has 3 cells (1 skipped: 1 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.00 MB. Time =     0.00 sec
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

12.1.2. Re-integrating ABC results.
ABC RESULTS:               INV cells:     3725
ABC RESULTS:             NAND2 cells:     8504
ABC RESULTS:        internal signals:     5890
ABC RESULTS:           input signals:      128
ABC RESULTS:          output signals:       64
Removing temp directory.
Removed 0 unused cells and 1201 unused wires.

13. Executing EDIF backend.

14. Executing Verilog backend.
Dumping module `\surfboard'.

15. Executing JSON backend.

End of script. Logfile hash: 61deb2145e, CPU: user 1.21s system 0.17s, MEM: 61.55 MB peak
Yosys 0.54 (git sha1 db72ec3bd, g++ 15.1.1 -march=x86-64 -mtune=generic -O2 -fno-plt -fexceptions -fstack-clash-protection -fcf-protection -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer -ffile-prefix-map=/build/yosys/src=/usr/src/debug/yosys -fPIC -O3)
Time spent: 57% 1x abc (1 sec), 9% 13x opt_expr (0 sec), ...
